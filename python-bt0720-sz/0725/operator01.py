# 연산자(operator)
 # : 특정 작업을 수행하는데 사용되는 특수 기호나 구문
 # 항목의 개수 : 단항, 이항, 삼항 연산자로 구분
 # 사용 목적 : 산술, 대입, 관계 논리 연산자로 구분

###산술 연산자###

# 덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/)
# 모듈러(%), 제곱(**), 몫(//)

a = 5
b = 3
print(a + b) # 8
print(a - b) # 2
print(a * b) # 15
print(a / b) # 1.666666
print(a % b) # 모듈로(어떤 한 숫자를 다른 숫자로 나눈 나머지를 구하는 연산) # 2
print(a ** b) # 125
print(a // b) # 1

###비교 연산자###

# 결과값이 boolean타입으로 변환
# 두 값이 같은지(==), 두 값이 같지 않은지(!=)
# 이상(>=), 이하(<=), 초과(>), 미만(<)

a = 10
b = 20
print(a == b) # False
print(a != b) # True
print(a > b) # False
print(a < b) # True
print(a >= b) # False
print(a <= b) # True

###할당 연산자###

# : 변수에 값을 할당하는데 사용
# 기본 할당 연산자 : 등호(=)
# 복합 할당 연산자 : +=, -=, *=, /=, %=, **=, //=

a = 10 # 10을 a에 할당
a += 5 # a = a+5와 동일 (a의 값 : 15)
a -= 2 # a = a-2와 동일 (a의 값 : 13)
a *= 2 # a = a*2와 동일 (a의 값 : 26)
a /= 2 # a = a/2와 동일 (a의 값 : 13.0)

print(a)

###논리 연산자###

# : boolean값(True, False)을 다루는 연산자
# : and, or, not

a = True
b = False

print(a and b)
# : and 연산자는 모든 조건이 True일 때 Ture를 반환
# : 그렇지 않으면 False를 반환

print(a or b)
# : or 연산자는 적어도 하나의 조건이 True일 때 Ture를 반환
# : 모든 조건이 False일 때만 False를 반환

print(not a)
# : not 연산자는 boolean값을 반전


#================================================

# 변수 'a'와 'b'에 각각 10과 5를 할당하고, 그 합을 변수'c'에 저장한 후 출력하세요.
a = 10
b = 5
c = a + b
print(c)

# 변수 'd'에 7을 할당하고, 변수 'd'의 값에 3을 더한 후
d = 7
d += 3
print(d)

# 두 숫자가 모두 10보다 크거나 같은지 확인하는 코드를 작성하세요. 변수 'e'와 'f'에는 각각 12와 9를 할당
e = 12
f = 9
print(e>=10 and f>=10)

# 변수 'g'에 True를 할당하고, 'g'의 불리언 값을 반전시킨 후 출력
g = True
print(not g)
#================================================


###비트 연산자###

# : 피연산자를 이진 비트(bit) 수준에서 조작하는 연산자

# 비트 AND 연산자(&)
 # : 각 비트값을 비교해 모두 1이면 1을 변환, 그 외에는 0을 반환
a = 60 # 60 = 0011 1100
b = 13 # 13 = 0000 1101
print(a & b) # 0000 1100 (출력값 : 12)

# 비트 OR 연산자(|)
 # : 각 비트값을 비교해 하나라도 1이면 1을 변환, 모두 0일 경우에만 0을 반환
print(a | b) # 0011 1101 (출력값 : 61)

# 비트 XOR 연산자(^)
 # : 각 비트값을 비교해 서로 다르면 1을 반환, 같으면 0을 반환

# 비트 NOT 연산자(~)
 # : 각 비트를 반전

# 비트 왼쪽 시프트 연산자(<<)
 # : 비트 단위로 왼쪽으로 8비트 이동하면 2의 n거듭제곱만큼 곱셈
a = 60
print(a << 2) # 240(1111 0000)

# 비트 오른쪽 시프트 연산자(>>)
 # : 비트 단위로 오른쪽으로 8비트 이동하면 2의 n거듭제곱만큼 나눗셈
a = 60
print(a >> 2) # 15(0000 1111)

###시퀀스 연산자###

# 시퀀스(sequence) : 데이터의 순차적인 나열을 의미
 # ex) 리스트, 튜플, 문자열 등

# 결합 연산자 (+)
list1 = [1, 2, 3]
list2 = [4, 5, 6]
print(list1 + list2)

# 복제 연산자 (*)
print(list1 * 3)

###기타 연산자###

# 멤버십 연산자
 # : 어떤 값이 지정된 컬렉션에 포함되어 있는지 확인하는 데 사용

list = [1, 2, 3, 4, 5]
str = "marry me, Jaemin!"

# in 연산자
 # : 시퀀스나 컬렉션에 특정 요소가 포함 되어 있으면 True
 # : 그렇지 않으면 False를 반환
print(3 in list) # True
print(6 in list) # False

print('marry' in str) # True
print('Mark' in str) # False

# not in 연산자
 # : 시퀀스나 컬렉션에 특정 요소가 포함되어 있지 않으면 True
 # : 그렇지 않으면 False
print(3 not in list) # False
print(6 not in list) # True

print('marry' not in str) # False
print('Mark' not in str) # Ture

###연산자의 우선순위###

# 1. 괄호 ()
# 2. 지수 연산자 **
# 3. 부호 연산자(양수, 음수)
# 4. 곱셈, 나눗셈, 나머지, 몫
# 5. 덧셈, 뺄셈